import java.util.ArrayList;
import java.util.Scanner;

import org.omg.PortableInterceptor.IORInterceptor;

public class TheHeiganDance {
	public static void main(String[] args) {
		Scanner inputReader = new Scanner(System.in);
		
		int playerHitPoints = 18500;
		int heiganHitpoints = 3000000;
		int[][] chamber = new int[15][];				
		double playerDamage = Integer.parseInt(inputReader.nextLine());
		int currentRow = 7;
		int currentColumn = 7;
		boolean cloudHit = false;
				
		while (true) {
			if (!inputReader.hasNextLine()) {
				break;
			}
			
			if (cloudHit) {
				playerDamage -= 3500;
				cloudHit = false;
			}
			
			String[] parts = inputReader.nextLine().split(" ");			
			String spellName = parts[0];
			
			int row = Integer.parseInt(parts[1]);
			int column = Integer.parseInt(parts[2]);						
	
			if (isInDamagedPosition(row, column, currentRow, currentColumn)) {
				System.out.println('a');
			}
			
			if (currentRow == row && currentColumn == column) {
				if (spellName.equals("Cloud")) {
					playerHitPoints -= 3500;
					cloudHit = true;
				} else {
					playerHitPoints -= 7000;
				}
			}
		}
	}
	
	static boolean isInDamagedPosition(int row, int column, int currentRow, int currentColumn) {
		ArrayList<ArrayList<Integer>> damagedPositions = new ArrayList<>(); 

		for (int i = row - 1; i < row + 2; i++) {
			for (int j = column - 1; j < column + 2; j++) {
				ArrayList<Integer> position = new ArrayList<>();
				
				position.add(i);
				position.add(j);
				damagedPositions.add(position);
			}	
		}
		
		ArrayList<Integer> check = new ArrayList<>();
		
		check.add(row);
		check.add(column);
		
		if (damagedPositions.contains(check)) {
			return true;
		}
		
		return false;
	}
}
